#pragma once
#include <GameEngineCore/GameEngineActor.h>
#include <GameEngineCore/NumberRenderObject.h>

enum class PlayerState
{
	IDLE,
	MOVE,
};

// 설명 : 플레이어 클래스
class GameEngineImage;
class Player : public GameEngineActor
{
public:
	// constrcuter destructer
	Player();
	~Player();

	// delete Function
	Player(const Player& _Other) = delete;
	Player(Player&& _Other) noexcept = delete;
	Player& operator=(const Player& _Other) = delete;
	Player& operator=(Player&& _Other) noexcept = delete;

	void SetColImage(const std::string_view& _Name);

	void SetIsMyTurn(bool _Value)
	{
		IsMyTurn = _Value;
	}

	bool GetIsMyTurn()
	{
		return IsMyTurn;
	}

	void CreatePlayerAnimation(const std::string_view& _AnimationName, const std::string_view& _ImageName, int _StartFrame, int _EndFrame, float _InterTime, bool Loop = true); //외부(무기)에서 플레이어의 애니메이션을 만들 수 있게끔 
	void ChangePlayerAnimation(const std::string_view& _AnimationName, int _CurIndex = 0); //플레이어 애니메이션 변경
	void SetPlayerAnimationFrame(int _Frame); // 조준 상태일 때 프레임을 고정

	PlayerState GetPlayerState() //플레이어 상태를 받아옴
	{
		return StateValue;
	}

	bool IsPlayerAnimationEnd();

	void SetCanIMove(bool _Value)
	{
		CanIMove = _Value;
	}

	float4 GetPlayerDir() // 무기에서 현재 플레이어의 방향을 가지고 오는 메서드 
	{
		if ("Right_" == DirString)
		{
			return float4::Right;
		}
		else
		{
			return float4::Left;
		}
	}

protected:
	void Start() override;
	void Update(float _DeltaTime) override;
	void Render(float _DeltaTime) override;

private:
	bool CanIMove = true;

	GameEngineRender* AnimationRender = nullptr;  //애니메이션 렌더러
	GameEngineCollision* BodyCollision = nullptr; //공격 받았는지 여부를 확인하기 위한 콜리전

	//플레이어 UI관련 (HP, 화살표이미지)
	NumberRenderObject HPUI; //플레이어 HP를 보여줄 넘버 렌더러 


	bool IsMyTurn = false; //내 턴인지 체크

	//플레이어의 방향에 따라 다른 애니메이션을 하게끔 
	void DirCheck(const std::string_view& _AnimationName, int _CurIndex = 0);

	//이동 관련
	std::string DirString = "Right_"; //방향

	float4 MoveDir = float4::Zero; //플레이어의 이동 벡터

	float MoveSpeed = 50.0f;
	float Gravity = 300.0f;

	void GravityApplied();
	void MoveCalculation(float _DeltaTime);
	float4 PullUpCharacter(float4 _NextPos, float _DeltaTime); //플레이어가 colimage상 아래로 들어가 있다면,MoveDir을 위로 끌어올림

	GameEngineImage* ColImage = nullptr; //이동 등에 사용될 colimage

	//플레이어 스테이트 관련	
	void ChangeState(PlayerState _State);
	void UpdateState(float _Time);

	//플레이어의 현재 상태
	PlayerState StateValue = PlayerState::IDLE;

	void IdleStart();
	void IdleUpdate(float _DeltatTime);
	void IdleEnd();

	void MoveStart();
	void MoveUpdate(float _DeltatTime);
	void MoveEnd();

	//기본 스테이트 관련 함수
	//void Start();
	//void Update(float _DeltatTime);
	//void End();
};

